<?php

/**
 * ProcessWire Module AdminHidePageTreeByRole
 *
 * @author kixe Christoph Thelen
 * @license Licensed under GNU/GPL v3
 * inspired by AdminRestrictPageTree by Wanze, Kongondo and Netcarver
 *
 * For ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2.
 * http://www.processwire.com
 * @version 1.0.9
 * @since 1.0.1
 *      - added permission to reverse restriction set by this module
 *      - minor changes to prevent endless redirects, limitation of selectable redirect pages
 * @since 1.0.2
 *      - restrict view access for /page/*
 *      - added hook method noPermission()
 * @since 1.0.3
 *      - corrected typo in translation function
 * @since 1.0.4
 *      - landingPage per restrictedRole  myrole:1234 // pageID
 *      - strictly disallow /page/, /module/, /setup/, /access/ and all pages deriving from
 *      - allow only adminroot, /login/, /profile/ and custom pages under adminroot
 * @since 1.0.5
 *      - bugfix remove restriction for specified branches (add/edit) according to the Process instead of page IDs
 * @since 1.0.6
 *      - bugfix ProcessPageAdd check $input->get->parent_id AND $input->post->parent_id as well
 * @since 1.0.7
 *      - bugfix landingPage settings - trim page id before applying to selector
 * @since 1.0.8
 *      - changed on single restrictedRole to array of $restrictedRoles
 * @since 1.0.9
 *      - bugfix: hookPageViewable() let ProcessWire check access of the page beeing edited
 */

class AdminHidePageTreeByRole extends Process implements Module, ConfigurableModule {

    public static function getModuleInfo() {
		return array(
			'title'    => 'Admin Hide Page Tree by Role',
			'summary'  => 'Hides the page tree from users who have certain role(s).',
			'author'   => 'kixe',
			'version'  => 109,
			'href'     => 'https://processwire.com/talk/topic/6142-hide-page-tree-in-the-admin/#entry60087',
			'singular' => true,
			'autoload' => true,
            'permissions' => array(
                'admin-hide-page-tree-reverse' => __('Reverse the page tree view restriction for users assigned to another, excluded role. (AdminHidePageTreeByRole).'),
            )
		);
	}

    protected $landingPage = 2;
    protected $restrictedUserRoles = array();    
    protected $editableBranches = array();

    static public function getDefaultData() {
        return array(
            'restrictedRoles' => array(),
            'landingPages' => null,
            'editablePages' => null
        );
    }

    public function __construct() {
        foreach (self::getDefaultData() as $k => $v) {
            $this->$k = $v;
        }
    }

    public function init() {

        foreach ($this->restrictedRoles as $r) {
            if ($this->wire('user')->id && $this->wire('user')->hasRole($r)) $this->restrictedUserRoles[] = $r;
        }
        if (empty($this->restrictedUserRoles)) return;
        $this->editableBranches = $this->setEditableBranches($this->restrictedUserRoles);

        $landingPagesArray = array();
        if ($this->landingPages) {
            $landingPages = explode("\n", $this->landingPages);
            foreach ($landingPages as $line) {
                list($key,$value) = array_pad(explode(":", $line), 2, null);
                if($value) {
                    if (!$this->wire('pages')->get(trim($value))->viewable()) continue;
                    $landingPagesArray[trim($key)] = trim($value);
                }
            }
        }
        // if user has multiple restricted roles and this role multiple landing pages assigned, we take the first match
        foreach ($this->restrictedUserRoles as $restrictedRole) {
            if (!isset($landingPagesArray[$restrictedRole])) continue;
            $this->landingPage = $landingPagesArray[$restrictedRole];
            break;
        }

        if ($this->wire('user')->isLoggedin() && !$this->wire('user')->hasPermission('admin-hide-page-tree-reverse')) {
            $this->addHookBefore('ProcessHome::execute', $this, 'hookBeforeProcessHome');
            $this->addHookAfter('Page::viewable', $this, 'hookPageViewable');

            /**
             * @deprecated
             * we manage everything via Page::viewable
             *
            $this->addHookBefore('ProcessPageList::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessList::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessModule::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessPageSort::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessPageTrash::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessPageSearch::execute', $this, 'noPermission');
            $id = $this->wire('input')->get->id;
            if ($id && !$this->wire('pages')->get((int)$id)->editable()) {
                // allow for editable pages within modal
                $this->addHookBefore('ProcessPageEditLink::execute', $this, 'noPermission');
                $this->addHookBefore('ProcessPageEditImageSelect::execute', $this, 'noPermission');
            }
            $this->addHookBefore('ProcessPageLister::execute', $this, 'noPermission');
            $this->addHookBefore('ProcessRecentPages::execute', $this, 'noPermission');
            */
        }
    }

    /**
     * Welcome message for loggedin users
     */
    public function hookBeforeProcessHome(HookEvent $event) {    
        $event->replace = true;
        $event->return = wire('input')->wb? "<h2>".sprintf($this->_('Hi %s, welcome back!'),strtoupper(wire('user')->get('title|name')))."</h2>": $this->_('You are logged in. Use the main menu to navigate');
    }

    /**
     * Hook in Page::viewable()
     * max allowed: /admin/profile/ and other custom trees under /admin/
     */
    public function hookPageViewable(HookEvent $event) {

        // process page search ('page-edit' permission)
        // if ($event->object->id == 300) return;

        // prevent endless redirects
        if (wire('input')->get->login) {

            // Welcome back!
            $welcomeBack = $this->landingPage == 2? '?wb=1' : null;
            $url = $this->wire('pages')->get($this->landingPage)->url.$welcomeBack;
            // $this->wire('session')->redirect($url.$welcomeBack);
            // throws exception header already sent if sessionHistory is enabled
            // wire('config')->sessionHistory = 0;
            header("HTTP/1.1 301 Moved Permanently");
            header("Location: $url");
            exit(0);
        }

        // disallow pages 3=/page/, 21=/module/, 22=/setup/, 28=/access/
        if (in_array($event->object->id, array(3, 21, 22, 28))) {
            $event->return = false;
            return;
        }

        // let ProcessWire check access of the page beeing edited
        if (wire('input')->get->id == $event->object->id) return;

        // disallow pages having no process assigned
        if (empty($event->object->process)) {
            $event->return = false;
            return;
        }

        // allow edit for pages living under a specified tree, allow page add under a specified parent
        // excepted from restriction by role ($this->editablePage
        // template or field based edit/add permission required
        $allowedProcesses = array('ProcessPageAdd', 'ProcessPageEdit', 'ProcessPageEditImageSelect', 'ProcessPageEditLink');
        if ($this->editablePages && in_array($event->object->process, $allowedProcesses)) {
            // ajax request e.g. repeater item
            if ($event->object->process == 'ProcessPageEdit' && wire('config')->ajax) return;
            if ($event->object->process == 'ProcessPageAdd') $id = isset(wire('input')->get->parent_id)? (int) wire('input')->get->parent_id : (int) wire('input')->post->parent_id;
            else $id = (int) wire('input')->get->id;
            if ($this->isEditableBranch($id, true)) return;
            $event->return = false;
        }

        // disallow trees 3=/page/, 21=/module/, 22=/setup/, 28=/access/
        $parentIDs = array(3, 21, 22, 28);
        foreach ($parentIDs as $parentID) {
            if ($event->object->parents->has(wire('pages')->get($parentID))) {
                $event->return = false;
                break;
            }
        }
        return;
    }

    /**
     * check if the branch is allowed for edits or adds?
     *
     * @param id page (edit)/ parent id (add)
     * @param addPageToParentsArray bool
     * @return bool
     */
    protected function isEditableBranch($id, $addPageToParentsArray = false) {
        // quick exit
        // if (!$this->wire('pages')->get($id)->editable()) return false; // DO WE NEED THIS ???
        if (empty($this->editableBranches)) return false;
        // get family tree of the page to check
        $parentsArray = $this->wire('pages')->get($id)->parents->each('id');
        // add page itself
        if ($addPageToParentsArray) $parentsArray[] = $id;
        foreach ($this->editableBranches as $allowedParentID) {
            if (in_array($allowedParentID, $parentsArray)) return true;
         }
        return false;
    }

    /**
     * create array of page IDs of editable/ addable branches (parent ids) assigned to a specific role
     *
     * @param $roles array of role ids
     * @return array
     * @todo hookable? does not work! why? (:autoload module)
     */
    protected function ___setEditableBranches($roles) {
        if (!$this->editablePages) return array();
        $editableBranches = array();
        $editablePagesArray = explode("\n", $this->editablePages);
        if (empty($editablePagesArray)) return array();
        foreach ($editablePagesArray as $line) {
            list($key,$value) = array_pad(explode(":", $line), 2, null);
            if (!in_array($key, $roles) || $value === null) continue;
            $value = explode(",", $value);
            if (empty($value)) continue;
            foreach ($value as $pageID) {
                $pageID = (int) trim($pageID);
                $editableBranches[] = $pageID;
            }
        }
        return $editableBranches;   
    }

    /**
     * hook for anollowed processes
     * currently not in use
     * @deprecated
     *
    public function noPermission(HookEvent $event) {
        foreach ($this->restrictedRoles as $r) {
            if ($this->user->hasRole($r)) {
                $event->replace = true;
                $event->return = "<h2>".$this->_("You do not have permission to access this area.")."</h2>";               
            }
        }
    }
    */

    static public function getModuleConfigInputfields(array $data) {
        $data = array_merge(self::getDefaultData(), $data);
		$fields = new InputfieldWrapper();
		$modules = wire('modules');

        $role_list = self::makeOptions(wire('roles'));
		$f = $modules->get("InputfieldAsmSelect");
		$f->name = "restrictedRoles";
		$f->label =  __("Roles that will have the pages tree, SETUP, MODULES and ACCESS area hidden from them");
        $f->notes = __("Access allowed to custom admin pages, PROFILE, /page/edit/ and /page/add/ for pages as specified below.");
        $f->options = $role_list;
        $f->value = $data['restrictedRoles'];
		$fields->add($f);

		$f = $modules->get("InputfieldTextarea");
		$f->name = "landingPages";
		$f->label =  __("Page to redirect restricted users after login");
        $f->description =  __("Assign a page ID to role in the format 'role-name: pageID'. One per line if multiple.");
        $f->notes = __("No redirect if user is not permitted to view assigned page. Default landing page is admin root (id=2)");
        $f->value = $data['landingPages'];
        $fields->add($f);

        $f = $modules->get("InputfieldTextarea");
        $f->name = "editablePages";
        $f->label =  __("Allow Page Edit and Add by Branch");
        $f->description =  __("Assign parent IDs to role in the format 'role-name: pageID-1, pageID-2, ...'. One per line if multiple. Removes add/edit restriction for pages under the specified branch.");
        $f->notes = __("Mainly to allow page edit via modal via page reference fields");
        $f->value = $data['editablePages'];
        $fields->add($f);

        return $fields;
	}

    static public function makeOptions($wireArray) {
        $options = array();
        foreach ($wireArray as $f) {
            $label = $f->get('title|name');
            $key  = $f->name;
            $options[$key] = $label;
        }
        return $options;
    }
}
